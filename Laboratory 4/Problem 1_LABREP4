# Convert the oxo‚Äêlogic.py module to reflect OOP design by creating a Game class. 

import os
import random
import oxo_data


class Game:
#Guevarra
    def __init__(self):
        self.board = [" "]*9

    def saveGame(self):
        oxo_data.saveGame(self.board)

    def restoreGame(self):
        try:
            game = oxo_data.restoreGame()
            if len(game) == 9:
                self.board = game
            else:
                self.board = [" "]*9
        except IOError:
            self.board = [" "]*9
        
    def _generateMove(self):
        options = [i for i in range(len(self.board)) if self.board[i] == " "]
        if options:
            return random.choice(options)
        else:
            return -1

    def _isWinningMove(self, player):
        wins = ((0, 1, 2), (3, 4, 5), (6, 7, 8),
                (0, 3, 6), (1, 4, 7), (2, 5, 8),
                (0, 4, 8), (2, 4, 6))

        for a, b, c in wins:
            chars = self.board[a] + self.board[b] + self.board[c]
            if chars == player*3:
                return True
        return False
        
    def computerMove(self):
        cell = self.generateMove()
        if cell == -1:
            return 'D'
        self.board[cell] = 'O'
        if self.isWinningMove('O'):
            return 'O'
        else:
            return ""

    def playGame(self):
        result = ""
        while not result:
            print(self.board)
            try:
                cell = int(input("Enter your move: "))
                result = self.userMove(cell)
            except (ValueError, IndexError):
                print("Invalid move")
            if not result:
                result = self.computerMove()

            if not result:
                continue
            elif result == 'D':
                print("It's a draw")
            else:
                print("Winner is:", result)
            print(self.board)
            
    def userMove(self, cell):
        if self.board[cell] != ' ':
            raise ValueError('Invalid cell')
        else:
            self.board[cell] = 'X'
        if self.isWinningMove('X'):
            return 'X'
        else:
            return ""
            
if _name_ == "main":
    game = Game()
    game.playGame()
    game.saveGame()
    
